# https://taskfile.dev

version: '3'

includes:
  k8s: ./k8s # will look for ./documentation/Taskfile.yml
  docs: ./apps/frontend/host # will look for ./documentation/Taskfile.yml
#  docker: ./Dockerfile

vars:
  GREETING: Hello, World! core
  STATIC: static
  DYNAMIC:
    sh: echo "dynamic"

tasks:
  cluster:
    deps:
      - docs:default
#      - k8s:install-argo
#      - install-argo
    cmds:
      - kubectl info
  install-argo:
    cmds:
      - kubectl create namespkace argocd
      - kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
#      - kubectl create namespace argo-rollouts
#      - kubectl apply -n argo-rollouts -f https://github.com/argoproj/argo-rollouts/releases/latest/download/install.yaml
#      - kubectl create namespace argo
#      - kubectl apply -n argo -f https://github.com/argoproj/argo-workflows/releases/download/v<<ARGO_WORKFLOWS_VERSION>>/install.yaml
#      - kubectl create namespace argo-events
#      - kubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/stable/examples/eventbus/native.yaml
#      - kubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/stable/examples/event-sources/webhook.yaml
#    # sensor rbac
#      - kubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/rbac/sensor-rbac.yaml
#    # workflow rbac
#      - kubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/master/examples/rbac/workflow-rbac.yaml
#    Create webhook sensor.
#    - kubectl apply -n argo-events -f https://raw.githubusercontent.com/argoproj/argo-events/stable/examples/sensors/webhook.yaml
#    Expose the event-source pod via Ingress
#    kubectl -n argo-events port-forward $(kubectl -n argo-events get pod -l eventsource-name=webhook -o name) 12000:12000 &
#    curl -d '{"message":"this is my first webhook"}' -H "Content-Type: application/json" -X POST http://localhost:12000/example
#    kubectl -n argo-events get workflows | grep "webhook"
  print-date:
    cmds:
      - echo {{now | date "2006-01-02"}}
  pnpm:
    cmds:
      - pnpm {{.CLI_ARGS}}
  greet:
    deps: [print-date, foo, bar, docs:default, k8s:kind-local-cluster]
    dotenv: [ '.env', '{{.ENV}}/.env.', '{{.HOME}}/.env' ]
    vars:
      GCLOUD_CONFIG_LIST:
        sh: gcloud config list
      GIT_COMMIT:
        sh: git log -n 1 --format=%h
    env:
      KEYNAME: DIFFERENT_VALUE
#      GIT_COMMIT: 602979f
    cmds:
      - cmd: echo "all good here $GCLOUD_CONFIG_LIST"
      - echo "Using $KEYNAME and endpoint $ENDPOINT"
      - echo "Using GIT_COMMIT {{.GIT_COMMIT}}"
      - echo "Using ENDPOINT $ENDPOINT"
      - echo '{{OS}} {{ARCH}}'
      - echo '{{if eq OS "windows"}}windows-command{{else}}unix-command{{end}}'
      # This will be path/to/file on Unix but path\to\file on Windows
      - echo '{{fromSlash "path/to/file"}}'
      - task k8s:kind-local-cluster
#      - echo "Using commit $GIT_COMMIT"
#      - go build -ldflags="-X main.Version={{.GIT_COMMIT}}" main.go
#      - echo {{now | date "2006-01-02"}}
#      - scripts/foo.sh
#      - kubectl create secret docker-registry push-secret2 \
#        --docker-server=$REGISTRY_SERVER \
#        --docker-username=$REGISTRY_USER \
#        --docker-password=$REGISTRY_PASSWORD
  foo:
    cmds:
      - echo foo
  bar:
    cmds:
      - echo bar
  default:
    internal: false
    deps: [foo, bar]
    cmds:
      - echo "{{.GREETING}}"
      - echo "{{.GREETING}}"
    silent: true
    summary: Default app
#    try todo curcurrent runners
  local:
#    sources:
#      -
#    aliases:
#      - l
#      - add
    cmds:
      - docker images
  get-secret:
    kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
  ctlptl-create: # todo! using tasks
    summary: "Running local type of cluster by kind param/argument"
    cmds:
      - kind-local-cluster
      - just create-local-cluster
      - ctlptl create cluster kind --name=kind-local-prod-cluster --registry=ctlptl-registry
  kind-create:
    kind create cluster --name my-cluster --config cluster.yaml
  up1:
    summary: "Createing local dev env"
    deps:
      - install-argo
    cmds:
      -
  up:
    summary: "Running task 1"
    cmds:
      - kind create cluster --name my-local-kind-cluster --config cluster.yaml
      - helm install kube-prometheus bitnami/kube-prometheus -n prometheus --create-namespace --set installCRDs=true
      - ctlptl create cluster kind --name=kind-local-prod-cluster --registry=ctlptl-registry
      - helm install kube-prometheus bitnami/kube-prometheus -n prometheus --create-namespace --set installCRDs=true
# create argocd app
#      -
#      - install argo mussia30 app, kustomize, helm
      - ctlptl create cluster k3d --name=k3d-local-dev-cluster --registry=ctlptl-registry
      - helm install kube-prometheus bitnami/kube-prometheus -n prometheus --create-namespace --set installCRDs=true
#      Duplicated
      - kubectl apply --filename https://storage.googleapis.com/tekton-releases/pipeline/previous/v0.44.0/release.yaml
      - kubectl apply --filename https://github.com/shipwright-io/build/releases/download/v0.11.0/release.yaml
      - kubectl apply --filename https://github.com/shipwright-io/build/releases/download/v0.11.0/sample-strategies.yaml
      - kubectl wait --for condition=Available=True --timeout=300s deployment/argocd-server --namespace argocd
#      - kubectl apply -f k8s/argocd/apps.yaml
#      - istioctl install --set profile=default --verify -y # change this to helm
#      - kubectl label namespace default istio-injection=enabled
#      - kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.15/samples/bookinfo/platform/kube/bookinfo.yaml --wait
#      - kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.15/samples/bookinfo/networking/bookinfo-gateway.yaml
#      - kubectl apply -f https://raw.githubusercontent.com/istio/istio/master/samples/addons/prometheus.yaml
#      - kubectl apply -f https://raw.githubusercontent.com/istio/istio/master/samples/addons/grafana.yaml
#      - kubectl apply -f https://raw.githubusercontent.com/istio/istio/master/samples/addons/kiali.yaml
#      - kubectl apply -f https://raw.githubusercontent.com/istio/istio/master/samples/addons/jaeger.yaml
      - kubeshark tap &
#      - helm repo add datree-webhook https://datreeio.github.io/admission-webhook-datree
#      - helm repo update
#      - helm install -n datree datree-webhook datree-webhook/datree-admission-webhook --debug \
#        --create-namespace \
#        --set datree.token=fcf73422-dfe1-4d3e-8115-7d200aea2493 \
#        --set datree.clusterName=$(kubectl config current-context)
#      - just install-linkerd
#      - just install-viz
      - tilt up
#      - open argocd ui
#  summary: "Running task general"
  down:
    preconditions:
      - docker ps
    deps:
      - get-secret
    summary: Clean up kubernetes all clusters
    cmds:
      - kubeshark clean
      - tilt down
      - ctlptl delete cluster k3d-local-prod-cluster
      - ctlptl delete cluster k3d-local-dev-cluster
#      - todo gke cluster
  gke-cluster:
    cmds:
      - gcloud beta container --project "yuri-sandbox" clusters create "cluster-1" --no-enable-basic-auth --cluster-version "1.24.9-gke.3200" --release-channel "regular" --machine-type "e2-standard-4" --image-type "COS_CONTAINERD" --disk-type "pd-balanced" --disk-size "100" --metadata disable-legacy-endpoints=true --scopes "https://www.googleapis.com/auth/devstorage.read_only","https://www.googleapis.com/auth/logging.write","https://www.googleapis.com/auth/monitoring","https://www.googleapis.com/auth/servicecontrol","https://www.googleapis.com/auth/service.management.readonly","https://www.googleapis.com/auth/trace.append" --num-nodes "3" --logging=SYSTEM,WORKLOAD --monitoring=SYSTEM --enable-ip-alias --network "projects/yuri-sandbox/global/networks/default" --subnetwork "projects/yuri-sandbox/regions/europe-central2/subnetworks/default" --no-enable-intra-node-visibility --default-max-pods-per-node "110" --no-enable-master-authorized-networks --addons HorizontalPodAutoscaling,HttpLoadBalancing,CloudRun,GcePersistentDiskCsiDriver,ConfigConnector,GcpFilestoreCsiDriver --enable-autoupgrade --enable-autorepair --max-surge-upgrade 1 --max-unavailable-upgrade 0 --maintenance-window-start "2023-03-01T22:00:00Z" --maintenance-window-end "2023-03-02T22:00:00Z" --maintenance-window-recurrence "FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR,SA,SU" --labels mesh_id=proj-394442038451 --enable-managed-prometheus --workload-pool "yuri-sandbox.svc.id.goog" --enable-shielded-nodes --node-locations "europe-central2-a","europe-central2-b","europe-central2-c"
      - gcloud container --project "yuri-sandbox" clusters create-auto "autopilot-cluster-1" --region "us-central1" --release-channel "regular" --network "projects/yuri-sandbox/global/networks/default" --subnetwork "projects/yuri-sandbox/regions/us-central1/subnetworks/default" --cluster-ipv4-cidr "/17" --services-ipv4-cidr "/22" --labels mesh_id=proj-394442038451
  build:
    cmds:
      - ls
#      - go build -ldflags="-X main.Version={{.GIT_COMMIT}}" main.go
    vars:
      GIT_COMMIT:
        sh: git log -n 1 --format=%h

// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * CloudShell is the Schema for the cloudshells API
 *
 * @schema CloudShell
 */
export class CloudShell extends ApiObject {
  /**
   * Returns the apiVersion and kind for "CloudShell"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'cloudshell.cloudtty.io/v1alpha1',
    kind: 'CloudShell',
  }

  /**
   * Renders a Kubernetes manifest for "CloudShell".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: CloudShellProps = {}): any {
    return {
      ...CloudShell.GVK,
      ...toJson_CloudShellProps(props),
    };
  }

  /**
   * Defines a "CloudShell" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: CloudShellProps = {}) {
    super(scope, id, {
      ...CloudShell.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...CloudShell.GVK,
      ...toJson_CloudShellProps(resolved),
    };
  }
}

/**
 * CloudShell is the Schema for the cloudshells API
 *
 * @schema CloudShell
 */
export interface CloudShellProps {
  /**
   * @schema CloudShell#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * CloudShellSpec defines the desired state of CloudShell
   *
   * @schema CloudShell#spec
   */
  readonly spec?: CloudShellSpec;

}

/**
 * Converts an object of type 'CloudShellProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudShellProps(obj: CloudShellProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_CloudShellSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CloudShellSpec defines the desired state of CloudShell
 *
 * @schema CloudShellSpec
 */
export interface CloudShellSpec {
  /**
   * Cleanup specified whether to delete cloudshell resources when corresponding job status is completed.
   *
   * @schema CloudShellSpec#cleanup
   */
  readonly cleanup?: boolean;

  /**
   * @schema CloudShellSpec#commandAction
   */
  readonly commandAction?: string;

  /**
   * Configmap of the target kube-config, will replace by SA
   *
   * @schema CloudShellSpec#configmapName
   */
  readonly configmapName?: string;

  /**
   * ExposeMode describes how to access ttyd service, either ClusterIP, NodePort, Ingress or VirtualService.
   *
   * @schema CloudShellSpec#exposureMode
   */
  readonly exposureMode?: CloudShellSpecExposureMode;

  /**
   * Specifies a port number range 30000-32767 when using nodeport mode, if not specified, kubernetes default random rule is used. NodePort int32 `json:"NodePort,omitempty"` IngressConfig specifies necessary parameters to create ingress.
   *
   * @schema CloudShellSpec#ingressConfig
   */
  readonly ingressConfig?: CloudShellSpecIngressConfig;

  /**
   * accept only one client and exit on disconnection
   *
   * @schema CloudShellSpec#once
   */
  readonly once?: boolean;

  /**
   * PathPrefix specified a path prefix to access url, if not, the default path is used.
   *
   * @schema CloudShellSpec#pathPrefix
   */
  readonly pathPrefix?: string;

  /**
   * @schema CloudShellSpec#runAsUser
   */
  readonly runAsUser?: string;

  /**
   * @schema CloudShellSpec#ttl
   */
  readonly ttl?: number;

  /**
   * VirtualServiceConfig specifies some of the parameters necessary to create the virtaulService.
   *
   * @schema CloudShellSpec#virtualServiceConfig
   */
  readonly virtualServiceConfig?: CloudShellSpecVirtualServiceConfig;

}

/**
 * Converts an object of type 'CloudShellSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudShellSpec(obj: CloudShellSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cleanup': obj.cleanup,
    'commandAction': obj.commandAction,
    'configmapName': obj.configmapName,
    'exposureMode': obj.exposureMode,
    'ingressConfig': toJson_CloudShellSpecIngressConfig(obj.ingressConfig),
    'once': obj.once,
    'pathPrefix': obj.pathPrefix,
    'runAsUser': obj.runAsUser,
    'ttl': obj.ttl,
    'virtualServiceConfig': toJson_CloudShellSpecVirtualServiceConfig(obj.virtualServiceConfig),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ExposeMode describes how to access ttyd service, either ClusterIP, NodePort, Ingress or VirtualService.
 *
 * @schema CloudShellSpecExposureMode
 */
export enum CloudShellSpecExposureMode {
  /** ClusterIP */
  CLUSTER_IP = "ClusterIP",
  /** NodePort */
  NODE_PORT = "NodePort",
  /** Ingress */
  INGRESS = "Ingress",
  /** VirtualService */
  VIRTUAL_SERVICE = "VirtualService",
}

/**
 * Specifies a port number range 30000-32767 when using nodeport mode, if not specified, kubernetes default random rule is used. NodePort int32 `json:"NodePort,omitempty"` IngressConfig specifies necessary parameters to create ingress.
 *
 * @schema CloudShellSpecIngressConfig
 */
export interface CloudShellSpecIngressConfig {
  /**
   * IngressClassName specifies a ingress controller to ingress, it must be fill when the cluster have multiple ingress controller service.
   *
   * @schema CloudShellSpecIngressConfig#ingressClassName
   */
  readonly ingressClassName?: string;

  /**
   * IngressName specifies a name to ingress, if it's empty, default "cloudshell-ingress".
   *
   * @schema CloudShellSpecIngressConfig#ingressName
   */
  readonly ingressName?: string;

  /**
   * Namespace specifies a namespace that the virtualService will be created in it. if it's empty, default the cloudshell namespace.
   *
   * @schema CloudShellSpecIngressConfig#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'CloudShellSpecIngressConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudShellSpecIngressConfig(obj: CloudShellSpecIngressConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ingressClassName': obj.ingressClassName,
    'ingressName': obj.ingressName,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * VirtualServiceConfig specifies some of the parameters necessary to create the virtaulService.
 *
 * @schema CloudShellSpecVirtualServiceConfig
 */
export interface CloudShellSpecVirtualServiceConfig {
  /**
   * The value "." is reserved and defines an export to the same namespace that the virtual service is declared in. Similarly the value "*" is reserved and defines an export to all namespaces.
   *
   * @schema CloudShellSpecVirtualServiceConfig#export_to
   */
  readonly exportTo?: string;

  /**
   * Gateway must be specified and the gateway already exists in the cluster.
   *
   * @schema CloudShellSpecVirtualServiceConfig#gateway
   */
  readonly gateway?: string;

  /**
   * Namespace specifies a namespace that the virtualService will be created in it. if it's empty, default the cloudshell namespace.
   *
   * @schema CloudShellSpecVirtualServiceConfig#namespace
   */
  readonly namespace?: string;

  /**
   * VirtualServiceName specifies a name to virtualService, if it's empty, default "cloudshell-VirtualService"
   *
   * @schema CloudShellSpecVirtualServiceConfig#virtualServiceName
   */
  readonly virtualServiceName?: string;

}

/**
 * Converts an object of type 'CloudShellSpecVirtualServiceConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudShellSpecVirtualServiceConfig(obj: CloudShellSpecVirtualServiceConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'export_to': obj.exportTo,
    'gateway': obj.gateway,
    'namespace': obj.namespace,
    'virtualServiceName': obj.virtualServiceName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

